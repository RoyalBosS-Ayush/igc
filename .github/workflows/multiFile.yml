name: multi-file
on:
  workflow_dispatch:
jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v2

      - name: Set up our JDK environment # setup JDK environment: mandatory as we need to build  android project
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 19

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
        run: yarn install --frozen-lockfile

      ## configure cash for gradle : will help to reduce build time
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Restore Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Generate Debug APK
        run: |
          cd android && ./gradlew assembleDebug --build-cache && cd ..
      - name: Upload Debug APK
        uses: actions/upload-artifact@v1
        with:
          name: app-debug.apk
          path: android/app/build/outputs/apk/debug/app-arm64-v8a-debug.apk
      - name: upload debug apk to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: 1:886718377755:android:8aaa550027f387097c6dbe
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: android/app/build/outputs/apk/debug/app-arm64-v8a-debug.apk

      - name: Generate App APK
        run: |
          cd android && ./gradlew assembleRelease --build-cache && cd ..
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-arm64-v8a-release.apk
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: 1:886718377755:android:8aaa550027f387097c6dbe
          token: 1//0gCeCGFEJ-L5LCgYIARAAGBASNwF-L9IrufpSznVXkZOAM0AETSiSWiaR-J13kYwPUwlzZFrqO6uFCpDzo4GJqNObFArudtYOEvI
          groups: testers
          file: android/app/build/outputs/apk/release/app-arm64-v8a-release.apk

      - name: Generate Release Bundle
        run: |
          cd android && ./gradlew bundleRelease --build-cache && cd ..
      - name: Upload Bundle
        uses: actions/upload-artifact@v1
        with:
          name: app-release.aab
          path: android/app/build/outputs/bundle/release/app-release.aab 
      - name: upload bundle to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: 1:886718377755:android:8aaa550027f387097c6dbe
          token: 1//0gCeCGFEJ-L5LCgYIARAAGBASNwF-L9IrufpSznVXkZOAM0AETSiSWiaR-J13kYwPUwlzZFrqO6uFCpDzo4GJqNObFArudtYOEvI
          groups: testers
          file: android/app/build/outputs/bundle/release/app-release.aab 
